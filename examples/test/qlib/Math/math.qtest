#!/usr/bin/env qore

%requires ../../../../qlib/Math.qm
%requires ../../../../qlib/QUnit.qm

%new-style
%require-types
%enable-all-warnings

%exec-class MathTest

#! Returns a new list as 'num' times concatenated 'arg' list.
list sub listmul (softlist arg, softint num) {
    list r = ();
    while (num > 0) {
        r += arg;
        --num;
    }
    return r;
}


public class MathTest inherits QUnit::Test {
    constructor() : Test ("MathTest", "1.0") {
        addTestCase ("Test listmul helper function", \test_listmul());
        addTestCase ("Test gamma function", \test_gamma());
        addTestCase ("Test log function", \test_log());
        addTestCase ("Test sum functions", \test_sum());
        set_return_value(main());
    }

    test_listmul() {
        assertEq (list(), listmul ((), 2), "listmul: empty list");
        assertEq (list(), listmul ((1,2), 0), "listmul: num=0");
        assertEq ((1,2), listmul ((1,2), 1), "listmul: num=1");
        assertEq ((1,2,1,2,1,2), listmul ((1,2), 3), "listmul: num>1");
    }

    test_gamma() {
        list r = (
                2.67893853, 1.35411794, 1.00000000, 0.89297951, 0.90274529,
                1.00000000, 1.19063935, 1.50457549, 2.00000000, 2.77815848,
                );
        for (float x=1.0; x <= 10.0; x+=1.0)
            assertFloatEq (r[x-1], gamma (x/3.0), 0.00000001, sprintf ("gamma #%d", x));
    }

    test_log() {
        float eps = 0.0000000001;
        assertFloatEq (-1, log (1/M_E), eps, 'log(1/e)');
        assertFloatEq (0, log (1.0), eps, 'log(1)');
        assertFloatEq (1, log (M_E), eps, 'log(e)');
        assertFloatEq (5, log (32.0, 2), eps, 'log(32, 2)');
        assertFloatEq (40, log (pow(10.0, 40), 10), eps, 'log(10^40, 10)');
        assertFloatEq (2, log (pow(10.0, 40), pow(10.0, 20)), eps, 'log(10^40, 10^20)');
        assertNumberEq (2302.5850929940457, log (pow(10n, 1000)), eps, 'log(10^1000)');
        # assertTrue (log(-1.5).nanp()); # TODO: float does not have nanp() yet
        # assertTrue (log(-pow(10.0, 1000)).nanp()); # TODO: float does not have nanp() yet
        # assertTrue (log(@NInf@).ninfp()); # no negative infinity support in Qore yet
        # assertTrue (log(@Inf@).infp()); # TODO: float does not have nanp() yet
        # assertTrue (log(@NaN@).nanp()); # TODO: float does not have nanp() yet
    }

    test_sum() {
        # generic function
        assertEq (50005000, sum (range (10000)), "sum: integers");
        assertEq (0.0, sum (listmul ((1.0, 1e100, 1.0, -1e100), 10000)), "sum: floats"); # NOTE: exploits lack of precision of 64-bit float
        assertEq (20000n, sum (listmul ((1n, 1e100n, 1n, -1e100n), 10000)), "sum: numbers");
        # specialised functions
        assertEq (50005000, isum (range (10000)), "isum");
        assertEq (20000.0, fsum (listmul ((1, 1e100, 1, -1e100), 10000)), "fsum");
        assertEq (20000n, nsum (listmul ((1n, 1e100n, 1n, -1e100n), 10000)), "nsum");
    }
}
