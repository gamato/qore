# -*- mode: qore; indent-tabs-mode: nil -*-
# @file Math.qm Mathematical functions

/*  Math.qm Copyright 2016 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.12

%new-style
%require-types
%enable-all-warnings

module Math {
    version = "0.1";
    desc    = "Mathematical functions";
    author  = "Martin Otto <martin@qore.org>";
    url     = "https://qore.org";
    license = "MIT";
    init    = sub () { init(); };
}

namespace Init {
    sub init() {
    }
}

public namespace Math {
    # Some useful constants
    public const M_E = 2.718281828459045235360287471352662497757247093699959574966;
    public const M_PI = 3.141592653589793238462643383279502884197169399375105820974;
    public const M_SQRTPI = 1.772453850905516027298167483341145182797549456122387128213;
    public const M_LOGPI = 1.144729885849400174143427351353058711647294812915311571513;

    #! Return the Gamma function at x. Lanczos approximation.
    public float sub gamma (softfloat x) {
        list p = (
                0.99999999999980993, 676.5203681218851, -1259.1392167224028,
                771.32342877765313, -176.61502916214059, 12.507343278686905,
                -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7,
                );
        int g = 7;

        if (x < 0.5)
            return M_PI / (sin (M_PI * x) * gamma (1-x));

        x -= 1;
        float a = p[0];
        float t = x + g + 0.5;
        for (int i=1; i < p.size(); ++i)
            a += p[i] / (x+i);

        return sqrt(2*M_PI) * pow(t, x+0.5) * exp(-t) * a;
    }

    #! Return the logarithm of x to the given base, calculated as nlog(x)/nlog(base).
    public float sub log (softfloat f, softfloat base = M_E) {
        return nlog(f) / nlog(base);
    }

    #! Return the logarithm of x to the given base, calculated as nlog(x)/nlog(base).
    public number sub log (number n, number base = M_E) {
        return nlog(n) / nlog(base);
    }
}

# vim:et:sw=4:ts=4:sts=4:
